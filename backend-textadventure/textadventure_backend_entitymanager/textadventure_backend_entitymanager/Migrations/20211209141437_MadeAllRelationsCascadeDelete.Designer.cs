// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using textadventure_backend_entitymanager.Context;

namespace textadventure_backend_entitymanager.Migrations
{
    [DbContext(typeof(TextadventureDBContext))]
    [Migration("20211209141437_MadeAllRelationsCascadeDelete")]
    partial class MadeAllRelationsCascadeDelete
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.12");

            modelBuilder.Entity("textadventure_backend_entitymanager.Models.Entities.AdventurerMaps", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AdventurerId")
                        .HasColumnType("int");

                    b.Property<bool>("EventCompleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdventurerId");

                    b.HasIndex("RoomId");

                    b.ToTable("AdventurerMaps");
                });

            modelBuilder.Entity("textadventure_backend_entitymanager.Models.Entities.Adventurers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Drawing")
                        .HasColumnType("longtext")
                        .HasColumnName("drawing");

                    b.Property<int>("DungeonId")
                        .HasColumnType("int");

                    b.Property<int>("Experience")
                        .HasColumnType("int")
                        .HasColumnName("experience");

                    b.Property<int>("Health")
                        .HasColumnType("int")
                        .HasColumnName("health");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("name");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DungeonId");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Adventurers");
                });

            modelBuilder.Entity("textadventure_backend_entitymanager.Models.Entities.Dungeons", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.HasKey("Id");

                    b.ToTable("Dungeons");
                });

            modelBuilder.Entity("textadventure_backend_entitymanager.Models.Entities.Items", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AdventurerId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("content");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("AdventurerId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("textadventure_backend_entitymanager.Models.Entities.NPCs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Conversation")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("varchar(5000)")
                        .HasColumnName("conversation");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("Risk")
                        .HasMaxLength(101)
                        .HasColumnType("int")
                        .HasColumnName("risk");

                    b.Property<int>("WeaponId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("NPCs");
                });

            modelBuilder.Entity("textadventure_backend_entitymanager.Models.Entities.RefreshTokens", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("active");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("expires_at");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("revoked_at");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("token");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("textadventure_backend_entitymanager.Models.Entities.Rooms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("DungeonId")
                        .HasColumnType("int");

                    b.Property<string>("EastInteraction")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("east");

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("event");

                    b.Property<string>("NorthInteraction")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("north");

                    b.Property<int>("PositionX")
                        .HasColumnType("int")
                        .HasColumnName("position_x");

                    b.Property<int>("PositionY")
                        .HasColumnType("int")
                        .HasColumnName("position_y");

                    b.Property<string>("SouthInteraction")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("south");

                    b.Property<string>("WestInteraction")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("west");

                    b.HasKey("Id");

                    b.HasIndex("DungeonId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("textadventure_backend_entitymanager.Models.Entities.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<bool>("Admin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("admin");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("textadventure_backend_entitymanager.Models.Entities.Weapons", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AdventurerId")
                        .HasColumnType("int");

                    b.Property<int>("Attack")
                        .HasColumnType("int")
                        .HasColumnName("attack");

                    b.Property<int>("Durability")
                        .HasMaxLength(101)
                        .HasColumnType("int")
                        .HasColumnName("durability");

                    b.Property<bool>("Equiped")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("equiped");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("AdventurerId");

                    b.ToTable("Weapons");
                });

            modelBuilder.Entity("textadventure_backend_entitymanager.Models.Entities.AdventurerMaps", b =>
                {
                    b.HasOne("textadventure_backend_entitymanager.Models.Entities.Adventurers", "Adventurer")
                        .WithMany("AdventurerMaps")
                        .HasForeignKey("AdventurerId")
                        .HasConstraintName("FK_AdventurerMaps_Adventurers")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("textadventure_backend_entitymanager.Models.Entities.Rooms", "Room")
                        .WithMany("AdventurerMaps")
                        .HasForeignKey("RoomId")
                        .HasConstraintName("FK_AdventurerMaps_Rooms")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adventurer");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("textadventure_backend_entitymanager.Models.Entities.Adventurers", b =>
                {
                    b.HasOne("textadventure_backend_entitymanager.Models.Entities.Dungeons", "Dungeon")
                        .WithMany("Adventurers")
                        .HasForeignKey("DungeonId")
                        .HasConstraintName("FK_Adventurers_Dungeons")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("textadventure_backend_entitymanager.Models.Entities.Rooms", "Room")
                        .WithMany("Adventurers")
                        .HasForeignKey("RoomId")
                        .HasConstraintName("FK_Adventurers_Rooms")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("textadventure_backend_entitymanager.Models.Entities.Users", "User")
                        .WithMany("Adventurers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Adventurers_Users")
                        .IsRequired();

                    b.Navigation("Dungeon");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("textadventure_backend_entitymanager.Models.Entities.Items", b =>
                {
                    b.HasOne("textadventure_backend_entitymanager.Models.Entities.Adventurers", "Adventurer")
                        .WithMany("Items")
                        .HasForeignKey("AdventurerId")
                        .HasConstraintName("FK_Items_Adventurers")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adventurer");
                });

            modelBuilder.Entity("textadventure_backend_entitymanager.Models.Entities.RefreshTokens", b =>
                {
                    b.HasOne("textadventure_backend_entitymanager.Models.Entities.Users", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_RefreshTokens_Users")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("textadventure_backend_entitymanager.Models.Entities.Rooms", b =>
                {
                    b.HasOne("textadventure_backend_entitymanager.Models.Entities.Dungeons", "Dungeon")
                        .WithMany("Rooms")
                        .HasForeignKey("DungeonId")
                        .HasConstraintName("FK_Rooms_Dungeons")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dungeon");
                });

            modelBuilder.Entity("textadventure_backend_entitymanager.Models.Entities.Weapons", b =>
                {
                    b.HasOne("textadventure_backend_entitymanager.Models.Entities.Adventurers", "Adventurer")
                        .WithMany("Weapons")
                        .HasForeignKey("AdventurerId")
                        .HasConstraintName("FK_Weapons_Adventurers")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adventurer");
                });

            modelBuilder.Entity("textadventure_backend_entitymanager.Models.Entities.Adventurers", b =>
                {
                    b.Navigation("AdventurerMaps");

                    b.Navigation("Items");

                    b.Navigation("Weapons");
                });

            modelBuilder.Entity("textadventure_backend_entitymanager.Models.Entities.Dungeons", b =>
                {
                    b.Navigation("Adventurers");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("textadventure_backend_entitymanager.Models.Entities.Rooms", b =>
                {
                    b.Navigation("AdventurerMaps");

                    b.Navigation("Adventurers");
                });

            modelBuilder.Entity("textadventure_backend_entitymanager.Models.Entities.Users", b =>
                {
                    b.Navigation("Adventurers");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
