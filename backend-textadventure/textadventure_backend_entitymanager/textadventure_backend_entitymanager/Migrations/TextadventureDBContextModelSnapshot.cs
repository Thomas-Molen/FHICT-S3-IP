// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using textadventure_backend_entitymanager.Context;

namespace textadventure_backend_entitymanager.Migrations
{
    [DbContext(typeof(TextadventureDBContext))]
    partial class TextadventureDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.12");

            modelBuilder.Entity("textadventure_backend_entitymanager.Models.AdventurerMaps", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AdventurerId")
                        .HasColumnType("int");

                    b.Property<bool>("EventCompleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdventurerId");

                    b.HasIndex("RoomId");

                    b.ToTable("AdventurerMaps");
                });

            modelBuilder.Entity("textadventure_backend_entitymanager.Models.Adventurers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("DungeonId")
                        .HasColumnType("int");

                    b.Property<int>("Experience")
                        .HasColumnType("int")
                        .HasColumnName("experience");

                    b.Property<int>("Health")
                        .HasColumnType("int")
                        .HasColumnName("health");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("name");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DungeonId");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Adventurers");
                });

            modelBuilder.Entity("textadventure_backend_entitymanager.Models.Dungeons", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.HasKey("Id");

                    b.ToTable("Dungeons");
                });

            modelBuilder.Entity("textadventure_backend_entitymanager.Models.Interactions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("NPCId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("NPCId");

                    b.ToTable("Interactions");
                });

            modelBuilder.Entity("textadventure_backend_entitymanager.Models.Items", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AdventurerId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("content");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("AdventurerId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("textadventure_backend_entitymanager.Models.NPCs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Conversation")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("varchar(5000)")
                        .HasColumnName("conversation");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("Risk")
                        .HasMaxLength(101)
                        .HasColumnType("int")
                        .HasColumnName("risk");

                    b.Property<int>("WeaponId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("WeaponId");

                    b.ToTable("NPCs");
                });

            modelBuilder.Entity("textadventure_backend_entitymanager.Models.RefreshTokens", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("active");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("expires_at");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("revoked_at");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("token");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("textadventure_backend_entitymanager.Models.Rooms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("DungeonId")
                        .HasColumnType("int");

                    b.Property<int>("EastInteractionId")
                        .HasColumnType("int");

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("event");

                    b.Property<int>("NorthInteractionId")
                        .HasColumnType("int");

                    b.Property<int>("PositionX")
                        .HasColumnType("int")
                        .HasColumnName("position_x");

                    b.Property<int>("PositionY")
                        .HasColumnType("int")
                        .HasColumnName("position_y");

                    b.Property<int>("SouthInteractionId")
                        .HasColumnType("int");

                    b.Property<int>("WestInteractionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DungeonId");

                    b.HasIndex("EastInteractionId");

                    b.HasIndex("NorthInteractionId");

                    b.HasIndex("SouthInteractionId");

                    b.HasIndex("WestInteractionId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("textadventure_backend_entitymanager.Models.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<bool>("Admin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("admin");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("textadventure_backend_entitymanager.Models.Weapons", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AdventurerId")
                        .HasColumnType("int");

                    b.Property<int>("Attack")
                        .HasColumnType("int")
                        .HasColumnName("attack");

                    b.Property<int>("Durability")
                        .HasMaxLength(101)
                        .HasColumnType("int")
                        .HasColumnName("durability");

                    b.Property<bool>("Equiped")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("equiped");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("AdventurerId");

                    b.ToTable("Weapons");
                });

            modelBuilder.Entity("textadventure_backend_entitymanager.Models.AdventurerMaps", b =>
                {
                    b.HasOne("textadventure_backend_entitymanager.Models.Adventurers", "Adventurer")
                        .WithMany("AdventurerMaps")
                        .HasForeignKey("AdventurerId")
                        .HasConstraintName("FK_AdventurerMaps_Adventurers")
                        .IsRequired();

                    b.HasOne("textadventure_backend_entitymanager.Models.Rooms", "Room")
                        .WithMany("AdventurerMaps")
                        .HasForeignKey("RoomId")
                        .HasConstraintName("FK_AdventurerMaps_Rooms")
                        .IsRequired();

                    b.Navigation("Adventurer");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("textadventure_backend_entitymanager.Models.Adventurers", b =>
                {
                    b.HasOne("textadventure_backend_entitymanager.Models.Dungeons", "Dungeon")
                        .WithMany("Adventurers")
                        .HasForeignKey("DungeonId")
                        .HasConstraintName("FK_Adventurers_Dungeons")
                        .IsRequired();

                    b.HasOne("textadventure_backend_entitymanager.Models.Rooms", "Room")
                        .WithMany("Adventurers")
                        .HasForeignKey("RoomId")
                        .HasConstraintName("FK_Adventurers_Rooms");

                    b.HasOne("textadventure_backend_entitymanager.Models.Users", "User")
                        .WithMany("Adventurers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Adventurers_Users")
                        .IsRequired();

                    b.Navigation("Dungeon");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("textadventure_backend_entitymanager.Models.Interactions", b =>
                {
                    b.HasOne("textadventure_backend_entitymanager.Models.NPCs", "NPC")
                        .WithMany("Interaction")
                        .HasForeignKey("NPCId")
                        .HasConstraintName("FK_Interactions_NPCs");

                    b.Navigation("NPC");
                });

            modelBuilder.Entity("textadventure_backend_entitymanager.Models.Items", b =>
                {
                    b.HasOne("textadventure_backend_entitymanager.Models.Adventurers", "Adventurer")
                        .WithMany("Items")
                        .HasForeignKey("AdventurerId")
                        .HasConstraintName("FK_Items_Adventurers")
                        .IsRequired();

                    b.Navigation("Adventurer");
                });

            modelBuilder.Entity("textadventure_backend_entitymanager.Models.NPCs", b =>
                {
                    b.HasOne("textadventure_backend_entitymanager.Models.Items", "Item")
                        .WithMany("NPCs")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_NPCs_Items")
                        .IsRequired();

                    b.HasOne("textadventure_backend_entitymanager.Models.Weapons", "Weapon")
                        .WithMany("NPCs")
                        .HasForeignKey("WeaponId")
                        .HasConstraintName("FK_NPCs_Weapons")
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Weapon");
                });

            modelBuilder.Entity("textadventure_backend_entitymanager.Models.RefreshTokens", b =>
                {
                    b.HasOne("textadventure_backend_entitymanager.Models.Users", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_RefreshTokens_Users")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("textadventure_backend_entitymanager.Models.Rooms", b =>
                {
                    b.HasOne("textadventure_backend_entitymanager.Models.Dungeons", "Dungeon")
                        .WithMany("Rooms")
                        .HasForeignKey("DungeonId")
                        .HasConstraintName("FK_Rooms_Dungeons")
                        .IsRequired();

                    b.HasOne("textadventure_backend_entitymanager.Models.Interactions", "EastInteraction")
                        .WithMany("RoomEast")
                        .HasForeignKey("EastInteractionId")
                        .HasConstraintName("FK_Rooms_EastInteractions")
                        .IsRequired();

                    b.HasOne("textadventure_backend_entitymanager.Models.Interactions", "NorthInteraction")
                        .WithMany("RoomNorth")
                        .HasForeignKey("NorthInteractionId")
                        .HasConstraintName("FK_Rooms_NorthInteractions")
                        .IsRequired();

                    b.HasOne("textadventure_backend_entitymanager.Models.Interactions", "SouthInteraction")
                        .WithMany("RoomSouth")
                        .HasForeignKey("SouthInteractionId")
                        .HasConstraintName("FK_Rooms_SouthInteractions")
                        .IsRequired();

                    b.HasOne("textadventure_backend_entitymanager.Models.Interactions", "WestInteraction")
                        .WithMany("RoomWest")
                        .HasForeignKey("WestInteractionId")
                        .HasConstraintName("FK_Rooms_WestInteractions")
                        .IsRequired();

                    b.Navigation("Dungeon");

                    b.Navigation("EastInteraction");

                    b.Navigation("NorthInteraction");

                    b.Navigation("SouthInteraction");

                    b.Navigation("WestInteraction");
                });

            modelBuilder.Entity("textadventure_backend_entitymanager.Models.Weapons", b =>
                {
                    b.HasOne("textadventure_backend_entitymanager.Models.Adventurers", "Adventurer")
                        .WithMany("Weapons")
                        .HasForeignKey("AdventurerId")
                        .HasConstraintName("FK_Weapons_Adventurers")
                        .IsRequired();

                    b.Navigation("Adventurer");
                });

            modelBuilder.Entity("textadventure_backend_entitymanager.Models.Adventurers", b =>
                {
                    b.Navigation("AdventurerMaps");

                    b.Navigation("Items");

                    b.Navigation("Weapons");
                });

            modelBuilder.Entity("textadventure_backend_entitymanager.Models.Dungeons", b =>
                {
                    b.Navigation("Adventurers");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("textadventure_backend_entitymanager.Models.Interactions", b =>
                {
                    b.Navigation("RoomEast");

                    b.Navigation("RoomNorth");

                    b.Navigation("RoomSouth");

                    b.Navigation("RoomWest");
                });

            modelBuilder.Entity("textadventure_backend_entitymanager.Models.Items", b =>
                {
                    b.Navigation("NPCs");
                });

            modelBuilder.Entity("textadventure_backend_entitymanager.Models.NPCs", b =>
                {
                    b.Navigation("Interaction");
                });

            modelBuilder.Entity("textadventure_backend_entitymanager.Models.Rooms", b =>
                {
                    b.Navigation("AdventurerMaps");

                    b.Navigation("Adventurers");
                });

            modelBuilder.Entity("textadventure_backend_entitymanager.Models.Users", b =>
                {
                    b.Navigation("Adventurers");

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("textadventure_backend_entitymanager.Models.Weapons", b =>
                {
                    b.Navigation("NPCs");
                });
#pragma warning restore 612, 618
        }
    }
}
